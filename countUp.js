// Generated by CoffeeScript 1.6.3
/**
 * @author inorganik
 * @example
 * numAnim = new countUp(
 *   document.getElementById("SomeElementYouWantToAnimate"),
 *   99.99,
 *   2,
 *   1500
 * );
 * numAnim.start();
 * @version 0.0.6
*/

var countUp;

countUp = (function() {
  countUp.prototype.useEasing = true;

  countUp.prototype.startTime = null;

  countUp.prototype.remaining = null;

  countUp.prototype.rAF = null;

  /**
   * @param {String} target The HTML element where counting occurs.
   * @param {Number} startVal The value you want to start at.
   * @param {Number} endVal The value you want to arrive at.
   * @param {Integer} [decimals=0] Number of decimal places in number.
   * @param {Float} [duration=2000] Duration in milliseconds.
  */


  function countUp(target, startVal, endVal, decimals, duration) {
    var lastTime, vendors;
    this.target = target;
    if (decimals == null) {
      decimals = 0;
    }
    this.duration = duration != null ? duration : 2000;
    lastTime = 0;
    vendors = ['webkit', 'moz', 'ms'];
    startVal = Number(startVal);
    endVal = Number(endVal);
    this.countDown = startVal > endVal;
    decimals = Math.max(0, decimals);
    this.dec = Math.pow(10, decimals);
    this.frameVal = startVal;
    while (x < vendors.length && !window.requestAnimationFrame) {
      window.requestAnimationFrame = window[vendors[x] + 'RequestAnimationFrame'];
      window.cancelAnimationFrame = window[vendors[x] + 'CancelAnimationFrame'] || window[vendors[x] + 'CancelRequestAnimationFrame'];
    }
    if (!window.requestAnimationFrame) {
      window.requestAnimationFrame = function(callback, element) {
        var currTime, id, timeToCall;
        currTime = new Date().getTime();
        timeToCall = Math.max(0, 16 - (currTime - lastTime));
        id = window.setTimeout(function() {
          return callback(currTime + timeToCall);
        }, timeToCall);
        lastTime = currTime + timeToCall;
        return id;
      };
    }
    if (!window.cancelAnimationFrame) {
      window.cancelAnimationFrame = function(id) {
        return clearTimeout(id);
      };
    }
  }

  countUp.target.innerHTML = countUp.addCommas(startVal.toFixed(decimals));

  countUp.prototype.easeOutExpo = function(t, b, c, d) {
    return c * (-Math.pow(2, -10 * t / d) + 1) * 1024 / 1023 + b;
  };

  countUp.prototype.count = function(timestamp) {
    var i, progress;
    if (this.startTime === null) {
      this.startTime = timestamp;
    }
    progress = timestamp - this.startTime;
    if (this.useEasing) {
      if (this.countDown) {
        i = this.easeOutExpo(progress, 0, startVal - endVal, this.duration);
        this.frameVal = startVal - i;
      } else {
        this.frameVal = this.easeOutExpo(progress, startVal, endVal - startVal, this.duration);
      }
    } else {
      if (this.countDown) {
        i = (startVal - endVal) * (progress / this.duration);
        this.frameVal = startVal - i;
      } else {
        this.frameVal = startVal + (endVal - startVal) * (progress / this.duration);
      }
    }
    this.frameVal = Math.round(this.frameVal * this.dec) / this.dec;
    if (this.countDown) {
      this.frameVal = this.framVal < endVal ? endVal : this.frameVal;
    } else {
      this.frameVal = this.framVal > endVal ? endVal : this.frameVal;
    }
    this.target.innerHTML = this.addCommas(this.frameVal.toFixed(decimals));
    if (progress < this.duration) {
      return this.rAF = requestAnimationFrame(this.count);
    } else {
      if (this.callback != null) {
        return this.callback();
      }
    }
  };

  countUp.prototype.start = function(callback) {
    this.callback = callback;
    if (!(isNaN(endVal) && isNan(startVal) !== null)) {
      requestAnimationFrame(this.count);
    } else {
      console.log('countUp error: startVal or endVal is not a number');
      this.target.innerHTML = '--';
    }
    return false;
  };

  countUp.prototype.stop = function() {
    return cancelAnimationFrame(this.rAF);
  };

  countUp.prototype.reset = function() {
    stop();
    return this.target.innerHTML = this.addCommas(startVal.toFixed(decimals));
  };

  countUp.prototype.resume = function() {
    this.startTime = null;
    this.duration = this.remaining;
    this.startVal = this.framVal;
    return requestAnimationFrame(this.count);
  };

  /**
   * add commas to a number every 3 places
   * @param {String|Number} nStr
   * @return {String} the comma-delimited number
  */


  countUp.prototype.addCommas = function(nStr) {
    var rgx, x1, x2, _ref;
    _ref = String(nStr).split('.'), x1 = _ref[0], x2 = _ref[1];
    x2 = x2 != null ? "." + x2 : '';
    rgx = /(\d+)(\d{3})/;
    while (rgx.test(x1)) {
      x1 = x1.replace(rgx, '$1' + ',' + '$2');
    }
    return x1 + x2;
  };

  return countUp;

})();
